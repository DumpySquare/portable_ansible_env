---

# Title:  update root/admin passwords
#  - sub-title: for devices long past initial deployment

#  prompt for AD user and password
#  try to update admin/root passwords with AD (or whatever remote auth is configured)
#  if that fails,
#  take list of old root/admin passwords as old_passl
#  Try each password to change admin password
#  when successful, update root

#  Created by: Ben Gordon (b.gordon@f5.com)
#  Date:  5.25.2019

- hosts: "{{ host }}"
  connection: local
  gather_facts: no
  no_log: true  # prevents logging of all the passwords
  vars:
    provider: # general provider dict
      server: "{{ host }}"
      user: "{{ ad_user }}"
      password: "{{ ad_user_pass }}"
      validate_certs: no
  vars_prompt:
    - name: "ad_user"
      prompt: "Enter your AD user"
      private: no
      default: "joe-admin"
    - name: "ad_user_pass"
      prompt: "Enter password"
    - name: "host"
      prompt: "hostname(inv-fqdn) to update"
      private: no


  tasks:
  - name: ------  MAIN TASKS BLOCK  ------
    block:
      - name: Changing admin password with ad_user "{{ ad_user }}"
        bigip_user:
          state: present
          username_credential: admin
          password_credential: "{{ latest_passwd }}"
          provider: "{{ provider }}"

      - name: Changing root password with ad_user "{{ ad_user }}"
        bigip_user:
          username_credential: root
          password_credential: "{{ latest_passwd }}"
          provider: "{{ provider }}"
    ###   *****  END MAIN TAST BLOCK  ***** 
    
    
    ###   ***** execute if main tast block fails  *****
    rescue:
      - debug: msg="AD account didn't work, tring known root/admin passwords"
      
      - name: Updating the admin password with admin+ known password list
        uri:
          url: "https://{{ ansible_host }}/mgmt/shared/authz/users/admin"
          method: PATCH
          body: 
            oldPassword: "{{ item }}"
            password: "{{ latest_passwd }}"
          body_format: json
          validate_certs: no
          status_code: 200, 401   #401 so we can continue if password has already been updated
          force_basic_auth: yes
          user: "{{ username }}"
          password: "{{ item }}"
          headers:
            Content-Type: "application/json"
        delegate_to: localhost
        register: admin_update
        loop: "{{ old_passl }}"
        when: admin_update is not defined or admin_update.status != 200

      # iterate through admin_update register for the success and get the password that worked
      - name: Get password that worked
        set_fact:
          pswd: "{{ item.item }}"   # first "item" is from this iteration, second "item" is from previous task iteration name
        with_items: "{{ admin_update.results }}"
        when: item.status is defined and item.status == 200

      # use the password that worked to update root account
      - name: Changing root password with admin
        bigip_user:
          username_credential: "{{ username }}"
          password_credential: "{{ latest_passwd }}"
          provider:
            server: "{{ host }}"
            user: "{{ username }}"
            password: "{{ pswd }}"
            validate_certs: no

