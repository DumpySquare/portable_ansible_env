---
# Ansible playbook to call bigiq api for managed bigip ucs list

# fetches bigiq auth token, then lists ucs bigiq has for managed bigips
#   Ben Gordon (b.gordon@f5.com)

- hosts: "bigiq01"
  connection: local
  gather_facts: no
  vars:   # some vars to help filter api call
    hostname: bigip32.f5.com  
    ucs_url: /mgmt/cm/system/backup-restore?
    filter:   # un-comment desired filters
      #- "$select=archiveFileName,name,id&"    # select file name and object name from ucs properties
      #- "$filter=device/hostname+eq+'{{ hostname }}'&"  # filter by hostname
  tasks:

  - name: Concatenate filter list
    set_fact:
      filter: "{{ filter | join('') }}"
    when: filter.0 is defined   # if filter has at least one value

  - name: Add api filter/select to url
        # if an odata filter/select is defined, add it to url
    set_fact:
      ucs_url: "{{ ucs_url + filter }}"
    when: filter.0 is defined   # if filter has at least one value

  - name: get bigiq auth token
    uri:
      url: "https://{{ ansible_host }}/mgmt/shared/authn/login"
      method: POST
      return_content: true
      validate_certs: false
      body_format: json
      body: 
        username: "{{ username }}"
        password: "{{ latest_passwd }}"
        logonProviderName: "{{ provider }}" 
      status_code: 200
    register: token
  
  - name: Calling bigiq API to list ucs
    uri:
      url: https://{{ ansible_host }}{{ ucs_url }}
      method: GET
      return_content: yes
      status_code: 200
      validate_certs: no
      body_format: json
      headers:
        X-F5-Auth-Token: "{{ token.json.token.token }}"
        Content-Type: "application/json"
    register: ucs_list
    
  - name: List ucs files    # listing results after the query, for demo purposes
    debug: msg="{{ item }}"
    with_items: |
      {% for item in ucs_list['json']['items'] %}
      --- {{ item.name }} --- {{ item.id }} ---
      {% endfor %}
    when: |
      "ucs_list.name is defined"
      "ucs_list.id is defined"
      