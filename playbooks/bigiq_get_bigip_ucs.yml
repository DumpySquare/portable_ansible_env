---
# Ansible playbook to import F5 BIG-IQ device inventory to Ansible INI inventory

# fetches bigiq auth token, calls device list via api, 
# Adds bigiq devices with hostname,mgmt-ip, uuid and some header info
# to end of current inventory defined to run play
#   Ben Gordon (b.gordon@f5.com)

# header information includes date/time and source hostname/IP

- hosts: "bigiq01"
  connection: local
  gather_facts: no
  vars:
    bigips: 
      - bigip31.f5.com
      - bigip32.f5.com
    # prefix to the ucs name the system uses, <prefix>hostname_<date>
    # example:  "preupgrade_bigip31.f5.com_20190328193122.ucs"
    prefix: "pre-upgrade_"  # ucs prefix
    life: 1   # number of days bigiq will keep the ucs
    desc: "Executed via Ansible"
  tasks:

  - name: get bigiq auth token
    uri:
      url: "https://{{ ansible_host }}/mgmt/shared/authn/login"
      method: POST
      return_content: true
      validate_certs: false
      body_format: json
      body: 
        username: "{{username}}"
        password: "{{latest_passwd}}"
        logonProviderName: "{{provider}}" 
      status_code: 200
    register: token
  
  - name: Calling bigiq API to collect ucs
    uri:
      url: https://{{ ansible_host }}/mgmt/shared/group-task
      method: POST
      return_content: yes
      status_code: 202
      validate_certs: no
      headers:
        X-F5-Auth-Token: "{{token.json.token.token}}"
        Content-Type: "application/json"
      body_format: json
      body:
        devicesReference: 
          link: https://localhost/mgmt/shared/resolver/device-groups/cm-bigip-allBigIpDevices/devices?$filter=hostname+eq+'{{ item }}'
        taskReference:
          link: https://localhost/mgmt/cm/system/backup-restore
        taskBody:
          namePrefix: "{{ prefix }}"
          includePrivateKeys: true
          isEncrypted: false
          backupLifeTime: 1
          shouldCreateArchive: false
          passphrase: null
          obfuscatedPassphrase: null
          backupCounter: null
          description: "{{ desc }}"
    register: json_response
    with_items: "{{ bigips }}"

  - name: Display json_response register
    debug: msg="{{json_response.results}}"
    #debug: msg="{% for item in json_response['results']['item'] %}{% endfor %}"
      
    #when: '"items" not in json_response.json'

#  - name: Display single ucs information
#    debug: msg="ucs id {{original_cert_subject.json.id}}"
#    when: '"items" not in json_response.json'
#
#  - name: Display multiple ucs information
#    debug: msg="ucs id {{original_cert_subject.json.id}}"
#    when: '"items" in json_response.json'